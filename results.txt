Timer unit: 1e-06 s

Total time: 9e-06 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: __init__ at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               def __init__(self, para_dict) -> None:
    17         1          2.0      2.0     22.2          self.para_dict = para_dict
    18                                                   # self.K = para_dict.get("K", 0)
    19                                           
    20         1          1.0      1.0     11.1          self.user_num = 0
    21         1          1.0      1.0     11.1          self.item_num = 0
    22         1          1.0      1.0     11.1          self.embedding_dim = para_dict.get("embedding_dim", 20)
    23                                           
    24         1          0.0      0.0      0.0          self.data = {}
    25         1          0.0      0.0      0.0          self.data["user"] = {}
    26         1          0.0      0.0      0.0          self.data["item"] = {}
    27                                           
    28         1          1.0      1.0     11.1          self.index = {}
    29         1          0.0      0.0      0.0          self.index["user"] = {}
    30         1          0.0      0.0      0.0          self.index["user"]["id2index"] = {}
    31         1          1.0      1.0     11.1          self.index["user"]["index2id"] = {}
    32                                                   
    33         1          0.0      0.0      0.0          self.index["item"] = {} 
    34         1          1.0      1.0     11.1          self.index["item"]["id2index"] = {}
    35         1          1.0      1.0     11.1          self.index["item"]["index2id"] = {}

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: eval_loss at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                               def eval_loss(self):
    38                                                   self.get_U()
    39                                                   self.get_I()
    40                                           
    41                                                   R = self.U @ self.I.T # M * N
    42                                           
    43                                                   s = 0
    44                                                   for u_index in range(self.user_num):
    45                                                       u_id = self.index["user"]["index2id"][u_index]
    46                                                       interacted_item_index = self.data["user"][u_id].interacted_item_index
    47                                                       ratings = self.data["user"][u_id].feedback
    48                                           
    49                                                       for i_index,r in zip(interacted_item_index, ratings):
    50                                                           s += (r - R[u_index, i_index])**2
    51                                                   
    52                                                   return s

Total time: 0.013496 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: add_new_user at line 54

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    54                                               def add_new_user(self, user_id):
    55       943      11539.0     12.2     85.5          user = User(user_id, self.para_dict)        
    56       943        384.0      0.4      2.8          self.data["user"][user_id] = user
    57       943        363.0      0.4      2.7          user.index = self.user_num
    58       943        434.0      0.5      3.2          self.index["user"]["index2id"][self.user_num] = user_id
    59       943        431.0      0.5      3.2          self.index["user"]["id2index"][user_id] = self.user_num
    60       943        345.0      0.4      2.6          self.user_num += 1

Total time: 0.013533 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: add_new_item at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                               def add_new_item(self, item_id):
    63      1682      10087.0      6.0     74.5          item = Item(item_id, self.para_dict)
    64      1682        704.0      0.4      5.2          self.data["item"][item_id]= item
    65      1682        588.0      0.3      4.3          item.index = self.item_num
    66      1682        780.0      0.5      5.8          self.index["item"]["index2id"][self.item_num ] = item_id
    67      1682        732.0      0.4      5.4          self.index["item"]["id2index"][item_id] = self.item_num
    68      1682        642.0      0.4      4.7          self.item_num += 1

Total time: 0.223468 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: get_user at line 70

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    70                                               def get_user(self, user_id):
    71    133860     118074.0      0.9     52.8          if user_id in self.data["user"]:
    72    133857      71458.0      0.5     32.0              user = self.data["user"][user_id]                
    73                                                   else:
    74         3         75.0     25.0      0.0              self.add_new_user(user_id)
    75         3          2.0      0.7      0.0              user = self.data["user"][user_id]
    76    133860      33859.0      0.3     15.2          return user

Total time: 0.063596 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: get_item at line 78

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    78                                               def get_item(self, i_id):
    79     33980      30188.0      0.9     47.5          if i_id in self.data["item"]:
    80     33882      23695.0      0.7     37.3              item = self.data["item"][i_id]                
    81                                                   else:
    82        98       1229.0     12.5      1.9              self.add_new_item(i_id)
    83        98         35.0      0.4      0.1              item = self.data["item"][i_id]
    84     33980       8449.0      0.2     13.3          return item

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: get_user_by_index at line 86

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    86                                               def get_user_by_index(self, u_index):
    87                                                   u_id = self.index["user"]["index2id"][u_index]
    88                                                   return self.get_user(u_id)

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: get_item_by_index at line 90

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    90                                               def get_item_by_index(self, i_index):
    91                                                   i_id = self.index["item"]["index2id"][i_index]
    92                                                   return self.get_item(i_id)

Total time: 0.018337 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: check_item_id_set_exists at line 95

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    95                                               def check_item_id_set_exists(self, item_id_set):
    96      1683        442.0      0.3      2.4          for item_id in item_id_set:
    97      1682        566.0      0.3      3.1              if item_id not in self.data["item"]:
    98      1584      17329.0     10.9     94.5                  self.add_new_item(item_id)

Total time: 0.016866 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: check_user_id_set_exists at line 100

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   100                                               def check_user_id_set_exists(self, user_id_set):
   101       944        243.0      0.3      1.4          for user_id in user_id_set:
   102       943        321.0      0.3      1.9              if user_id not in self.data["user"]:
   103       940      16302.0     17.3     96.7                  self.add_new_user(user_id)

Total time: 0.025831 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: online_init at line 106

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   106                                               def online_init(self, dls):
   107       944        307.0      0.3      1.2          for uid in self.data["user"]:
   108       943        326.0      0.3      1.3              user = self.data["user"][uid]
   109       943      25198.0     26.7     97.5              user.online_candidate_list = list(set(dls.item_id_set) - set(user.interacted_item_id))

Total time: 21.2716 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: update_data at line 111

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   111                                               def update_data(self, data, ex_info = None):
   112     33881      54436.0      1.6      0.3          if type(data) == pd.DataFrame:
   113         1          1.0      1.0      0.0              df = data
   114     33880      36250.0      1.1      0.2          elif type(data) == tuple and len(data) == 3:
   115     33880   11809855.0    348.6     55.5              df = pd.DataFrame(np.array(data)[np.newaxis,:], columns =["user_id", "item_id", "rating"])
   116                                                   
   117     33881      91059.0      2.7      0.4          N = len(df)
   118     67861    5801070.0     85.5     27.3          for index, row in df.iterrows():
   119     33980    1537307.0     45.2      7.2              user_id = row.user_id
   120     33980     601307.0     17.7      2.8              item_id = row.item_id
   121     33980     529047.0     15.6      2.5              rating = row.rating 
   122                                                       
   123     33980     256764.0      7.6      1.2              user = self.get_user(user_id)
   124     33980     167392.0      4.9      0.8              item = self.get_item(item_id)
   125                                           
   126     33980     302595.0      8.9      1.4              user.update_interaction(item_id, item.index, rating, ex_info)
   127                                                       
   128     33980      84487.0      2.5      0.4              item.update_interaction(user_id, user.index, rating, ex_info)

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: get_U at line 130

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   130                                               def get_U(self, method = "mean"):
   131                                                   self.U = np.zeros((self.user_num, self.embedding_dim))
   132                                           
   133                                                   for i in range(self.user_num):
   134                                                       id = self.index["user"]["index2id"][i]
   135                                                       user = self.data["user"][id]
   136                                                       self.U[i,:] = user.get_vec(method)
   137                                                   
   138                                                   return self.U

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: get_U_mean at line 140

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   140                                               def get_U_mean(self):
   141                                                   """
   142                                                       for light gcn
   143                                                   """
   144                                                   self.U_mean = torch.zeros((self.user_num, self.embedding_dim))
   145                                                   for i in range(self.user_num):    
   146                                                       user = self.get_user_by_index(i)
   147                                                       self.U_mean[i,:] = user.mu
   148                                                   
   149                                                   return self.U_mean

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: get_I_mean at line 159

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   159                                               def get_I_mean(self):
   160                                                   """
   161                                                       for light gcn
   162                                                   """
   163                                                   self.I_mean = torch.zeros((self.item_num, self.embedding_dim))
   164                                                   for i in range(self.item_num):    
   165                                                       item = self.get_item_by_index(i)
   166                                                       self.I_mean[i,:] = item.mu
   167                                                   
   168                                                   return self.I_mean

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: get_U_rho at line 170

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   170                                               def get_U_rho(self):
   171                                                   self.U_rho = torch.zeros((self.user_num, self.embedding_dim))
   172                                                   for i in range(self.user_num):    
   173                                                       user = self.get_user_by_index(i)
   174                                                       self.U_rho[i,:] = user.rho
   175                                                   
   176                                                   return self.U_rho

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: get_I_rho at line 178

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   178                                               def get_I_rho(self):
   179                                                   """
   180                                                       for light gcn
   181                                                   """
   182                                                   self.I_rho = torch.zeros((self.item_num, self.embedding_dim))
   183                                                   for i in range(self.item_num):    
   184                                                       item = self.get_item_by_index(i)
   185                                                       self.I_rho[i,:] = item.rho
   186                                                   
   187                                                   return self.I_rho

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: get_paramter at line 189

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   189                                               def get_paramter(self):
   190                                                   self.get_I_mean()
   191                                                   self.get_I_rho()
   192                                                   self.get_U_mean()
   193                                                   self.get_U_rho()

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: get_I at line 195

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   195                                               def get_I(self, method = "mean"):
   196                                                   self.I = np.zeros((self.item_num, self.embedding_dim))
   197                                           
   198                                                   for i in range(self.item_num):
   199                                                       id = self.index["item"]["index2id"][i]
   200                                                       item = self.data["item"][id]
   201                                                       self.I[i,:] = item.get_vec(method)
   202                                           
   203                                                   return self.I

Total time: 154.141 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: evaluate at line 205

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   205                                               def evaluate(self, data_cls):
   206         1          1.0      1.0      0.0          online_user_id_list = data_cls.online_id_stat
   207         1          1.0      1.0      0.0          T_prec_rall_list = [5, 10, 20, 40, 60, 80, 100, 120]
   208                                           
   209         9          9.0      1.0      0.0          for T in T_prec_rall_list:
   210         8      41753.0   5219.1      0.0              Precsion = pd.Series([self.data["user"][user_id].precision(T) for user_id in online_user_id_list]).mean()
   211                                           
   212         8      59197.0   7399.6      0.0              Recall = pd.Series([self.data["user"][user_id].recall(T, data_cls) for user_id in online_user_id_list]).mean()
   213                                           
   214         8       1041.0    130.1      0.0              logging.info(f"Precsion@{T}:{Precsion}")
   215         8        775.0     96.9      0.0              logging.info(f"Recall@{T}:{Recall}")
   216                                                   
   217         1          0.0      0.0      0.0          nDCG_k_list = [3, 5]
   218         1          1.0      1.0      0.0          nDCG_T_list = [10, 20, 40]
   219                                           
   220         2          2.0      1.0      0.0          for T in nDCG_T_list:
   221         4          4.0      1.0      0.0              for k in nDCG_k_list:
   222         3  154037680.0 51345893.3     99.9                  nDCG = pd.Series([self.data["user"][user_id].nDCG(T, k, data_cls) for user_id in online_user_id_list]).mean() 
   223         2        642.0    321.0      0.0                  logging.info(f"T = {T}, nDCG@{k}:{nDCG}")

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: evaluate_online at line 225

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   225                                               def evaluate_online(self, data_cls):
   226                                                   online_user_id_list = data_cls.online_id_stat
   227                                                   T_prec_rall_list = [5, 10, 20, 40]
   228                                           
   229                                                   for T in T_prec_rall_list:
   230                                                       Precsion = pd.Series([self.data["user"][user_id].precision(T) for user_id in online_user_id_list]).mean()
   231                                           
   232                                                       Recall = pd.Series([self.data["user"][user_id].recall(T, data_cls) for user_id in online_user_id_list]).mean()
   233                                           
   234                                                       logging.info(f"Precsion_@{T}:{Precsion}")
   235                                                       logging.info(f"Recall_@{T}:{Recall}")

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: graph_ma at line 269

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   269                                               def graph_ma(self, K):
   270                                                   """
   271                                                       aggregate K number
   272                                                   """
   273                                                   agg_ma = self.aggregation_ma
   274                                                   ma_dim = agg_ma.shape[0]
   275                                                   I = np.eye(ma_dim)
   276                                                   I = torch.tensor(I).to_sparse().to(dtype = torch.float32)
   277                                           
   278                                                   Graph_ma = torch.zeros_like(agg_ma)
   279                                                   agg_ma_powk = I
   280                                           
   281                                                   for _ in range(K):    
   282                                                       Graph_ma += agg_ma_powk
   283                                                       agg_ma_powk = torch.sparse.mm(agg_ma_powk, agg_ma)
   284                                                   Graph_ma += agg_ma_powk
   285                                           
   286                                                   Graph_ma = 1/(1 + K) * Graph_ma
   287                                           
   288                                                   return Graph_ma

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: g_value_k at line 290

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   290                                               def g_value_k(self, id, k, flag):
   291                                                   M, N = self.user_num, self.item_num
   292                                           
   293                                                   g = np.zeros(M+N)
   294                                                   if flag == "user":
   295                                                       user = self.get_user(id)
   296                                                       if k == 0:
   297                                                           index_ = user.index
   298                                                           g[index_] = 1
   299                                                           return g
   300                                                       elif k >= 1:
   301                                                           item_id_list = user.interacted_item_id
   302                                           
   303                                                           for item_id in item_id_list:
   304                                                               item = self.get_item(item_id)
   305                                                               g += 1 / (np.sqrt(user.interacted_num * item.interacted_num)) * self.g_value_k(item_id, k - 1, flag="item")
   306                                                           return g 
   307                                                  
   308                                                   elif flag == "item":
   309                                                       item = self.get_item(id)
   310                                                       if k == 0:
   311                                                           index_ = item.index
   312                                                           g[index_ + M] = 1
   313                                                           return g
   314                                                       elif k >= 1:
   315                                                           user_id_list = item.interacted_user_id
   316                                           
   317                                                           for u_id in user_id_list:
   318                                                               user = self.get_user(u_id)
   319                                                               g += 1 / (np.sqrt(user.interacted_num * item.interacted_num)) * self.g_value_k(u_id, k - 1, flag="user")
   320                                                           return g 
   321                                           
   322                                                   else:
   323                                                       assert False

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: g_value at line 325

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   325                                               def g_value(self, id, K, flag):
   326                                                   M, N = self.user_num, self.item_num
   327                                                   g = np.zeros(M + N)
   328                                           
   329                                                   for k in range(K + 1):
   330                                                       g += self.g_value_k(id, k, flag)
   331                                                   
   332                                                   return g / (K+1)

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: khop at line 335

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   335                                               def khop(self, uid, k):
   336                                                   user = self.get_user(uid)
   337                                           
   338                                                   user_neighbors_set = set([user.id])
   339                                                   item_neighbors_set = set([])
   340                                                   
   341                                                   i = 0
   342                                                   while k>0:
   343                                                       k -= 1
   344                                                       i += 1
   345                                                       if i % 2 == 1:
   346                                                           for uid in user_neighbors_set:
   347                                                               user = self.get_user(uid)
   348                                                               item_neighbors = set(user.interacted_item_id)
   349                                                               item_neighbors_set += item_neighbors
   350                                                       else:
   351                                                           for iid in item_neighbors_set:
   352                                                               item = self.get_item(iid)
   353                                                               user_neighbors = set(item.interacted_user_id)
   354                                                               user_neighbors_set += user_neighbors
   355                                           
   356                                                   return user_neighbors_set, item_neighbors_set

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: sub_adjacent at line 359

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   359                                               def sub_adjacent(self, u_set, i_set):
   360                                                   M = len(u_set)
   361                                                   N = len(i_set)
   362                                                   
   363                                                   R = np.zeros((M,N))
   364                                                   for i in range(M):
   365                                                       user = self.get_user(u_set[i])
   366                                                       item_indics = user.interacted_item_index
   367                                                       R[i, item_indics] = 1
   368                                                   O1 = np.zeros((M,M))
   369                                                   A1 = np.c_[O1, R]
   370                                           
   371                                                   O2 = np.zeros((N,N))
   372                                                   A2 = np.c_[R.T, O2]
   373                                                   return np.r_[A1, A2]

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: sub_aggregation_ma at line 375

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   375                                               def sub_aggregation_ma(self, u_set, i_set):
   376                                                   A = self.sub_adjacent(u_set, i_set)
   377                                                   d = (A != 0).sum(0)
   378                                           
   379                                                   d[(d==0)] += 1
   380                                           
   381                                                   d_2 = d**(-1/2)
   382                                                   ma = (d_2[:,np.newaxis]) * A *  d_2
   383                                                   return ma

Total time: 0 s
File: src/model/UI_cls_dir/UI_cls_f.py
Function: sub_graph_ma at line 385

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   385                                               def sub_graph_ma(self, K, u_set,i_set):
   386                                                   """
   387                                                       aggregate K number
   388                                                   """
   389                                                   sub_agg_ma = self.sub_aggregation_ma(u_set, i_set)
   390                                                   ma_dim = sub_agg_ma.shape[0]
   391                                                   I = np.eye(ma_dim)
   392                                                   # I = torch.tensor(I).to_sparse().to(dtype = torch.float32)
   393                                           
   394                                                   Graph_ma = torch.zeros_like(sub_agg_ma)
   395                                                   agg_ma_powk = I
   396                                           
   397                                                   for _ in range(K):    
   398                                                       Graph_ma += agg_ma_powk
   399                                                       agg_ma_powk = agg_ma_powk @ sub_agg_ma
   400                                                   Graph_ma += agg_ma_powk
   401                                           
   402                                                   Graph_ma = 1/(1 + K) * Graph_ma
   403                                           
   404                                                   return Graph_ma

Total time: 0.006829 s
File: src/model/User_dir/User_f.py
Function: __init__ at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                               def __init__(self, id, para_dict) -> None:
    19       943       2988.0      3.2     43.8          super().__init__(para_dict)
    20       943        369.0      0.4      5.4          self.id = id 
    21       943        318.0      0.3      4.7          self.index = None
    22                                                   
    23       943        600.0      0.6      8.8          self.interacted_item_id = []
    24       943        382.0      0.4      5.6          self.interacted_item_index = []
    25                                           
    26       943        334.0      0.4      4.9          self.feedback = []
    27                                                   
    28                                           
    29       943        320.0      0.3      4.7          self.online_round = 0
    30       943        374.0      0.4      5.5          self.online_rec_list = []
    31       943        325.0      0.3      4.8          self.online_candidate_list = []
    32       943        497.0      0.5      7.3          self.online_feedback01 = []
    33                                           
    34       943        322.0      0.3      4.7          self.A = 0  ### For ICF

Total time: 0.13306 s
File: src/model/User_dir/User_f.py
Function: update_interaction at line 45

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    45                                               def update_interaction(self, item_id, item_index, feedback, ex_info = None):
    46     33980      22419.0      0.7     16.8          self.interacted_item_id.append(item_id)
    47     33980      28231.0      0.8     21.2          self.interacted_item_index.append(item_index)
    48                                           
    49     33980      15607.0      0.5     11.7          self.feedback.append(feedback)
    50                                           
    51     33980      15709.0      0.5     11.8          if ex_info != None:
    52     33880      19182.0      0.6     14.4              online_rec_list = ex_info.get("online_rec_list", None)
    53     33880      15539.0      0.5     11.7              if  ex_info.get("online_rec_list", None) != None:
    54     33880      16373.0      0.5     12.3                  self.online_rec_list.append(online_rec_list)

Total time: 0.021583 s
File: src/model/User_dir/User_f.py
Function: precision at line 57

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    57                                               def precision(self, T):
    58      7536       2720.0      0.4     12.6          if self.online_round < T:
    59      4066       1029.0      0.3      4.8              return None
    60                                                   
    61      3470       1370.0      0.4      6.3          if len(self.interacted_item_id) < VALID_NUM:
    62                                                       return None
    63                                                   
    64      3470      16464.0      4.7     76.3          return (np.array(self.online_feedback01[:T])).sum()

Total time: 0.022121 s
File: src/model/User_dir/User_f.py
Function: recall_ at line 66

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    66                                               def recall_(self, T, satisﬁed_num):
    67      7536       2567.0      0.3     11.6          if self.online_round < T:
    68      4066       1001.0      0.2      4.5              return None
    69                                                   
    70      3470       1440.0      0.4      6.5          if len(self.interacted_item_id) < VALID_NUM:
    71                                                       return None
    72                                           
    73      3470      17113.0      4.9     77.4          return (np.array(self.online_feedback01[:T])).sum() / satisfied_num

Total time: 0.041439 s
File: src/model/User_dir/User_f.py
Function: recall at line 75

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    75                                               def recall(self, T, dls):
    76      7536       3391.0      0.4      8.2          satisﬁed_num = dls.exposure_satisﬁed[self.id] # - (np.array(self.online_feedback01)).sum()
    77      7536      38048.0      5.0     91.8          return self.recall_(T, satisfied_num)

Total time: 0.992104 s
File: src/model/User_dir/User_f.py
Function: DCG at line 79

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    79                                               def DCG(self, list_rating): 
    80                                                   """
    81                                                       len(list_rating) = K
    82                                                   """
    83     57058      27466.0      0.5      2.8          s = 0
    84     57058      25551.0      0.4      2.6          K = len(list_rating)
    85    304130     125194.0      0.4     12.6          for k in range(K):
    86    247072     100328.0      0.4     10.1              rating = list_rating[k]
    87    247072     697509.0      2.8     70.3              s += (2**rating - 1) / np.log2(k + 2)
    88     57058      16056.0      0.3      1.6          return s

Total time: 0.797975 s
File: src/model/User_dir/User_f.py
Function: IDCG at line 90

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    90                                               def IDCG(self, K):
    91                                                   """
    92                                                       ideal DCG
    93                                                   """
    94     28529     229924.0      8.1     28.8          list_rating = np.ones(K)
    95                                                   # list_rating = np.sort(np.array(candidate_rating_list))[-K:]
    96     28529     568051.0     19.9     71.2          return self.DCG(list_rating)

Total time: 153.931 s
File: src/model/User_dir/User_f.py
Function: nDCG at line 98

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    98                                               def nDCG(self, T, K, data_cls):
    99      2369       2079.0      0.9      0.0          if self.online_round < T:
   100                                                       return None   
   101      2369       1813.0      0.8      0.0          if len(self.interacted_item_id) < VALID_NUM:
   102                                                       return None
   103                                           
   104                                                   # candidate_set = set(data_cls.exposure[self.id]) - set(self.interacted_item_id[:-self.online_round])
   105                                           
   106      2369        994.0      0.4      0.0          s = 0 
   107     30898      17297.0      0.6      0.0          for t in range(T):
   108     28530      26844.0      0.9      0.0              rec_item_id_list = self.online_rec_list[t]
   109                                           
   110     28530      19257.0      0.7      0.0              if len(rec_item_id_list) < K:
   111                                                           return None
   112                                           
   113     28530  152096114.0   5331.1     98.8              list_rating = [data_cls.feedback(self.id, item_id)[1] for item_id in rec_item_id_list]
   114                                                       
   115                                                       # candidate_rating_list = [data_cls.feedback(self.id, item_id) for item_id in candidate_set]
   116                                                       # candidate_set = candidate_set - set(self.interacted_item_id[:-self.online_round + t])
   117                                                       
   118     28529    1765950.0     61.9      1.1              s += self.DCG(list_rating) / self.IDCG(K)
   119                                                   
   120      2368        932.0      0.4      0.0          return s

